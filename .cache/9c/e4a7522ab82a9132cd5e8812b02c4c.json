{"id":"app.svelte","dependencies":[{"name":"E:\\pro\\web\\lb-toast\\svelte.config.js","includedInParent":true,"mtime":1598511907046},{"name":"E:\\pro\\web\\lb-toast\\package.json","includedInParent":true,"mtime":1598521567810},{"name":"svelte/internal","loc":{"line":27,"column":7},"parent":"E:\\pro\\web\\lb-toast\\src\\app.svelte","resolved":"E:\\pro\\web\\lb-toast\\node_modules\\svelte\\internal\\index.mjs"},{"name":"./app","loc":{"line":30,"column":39},"parent":"E:\\pro\\web\\lb-toast\\src\\app.svelte","resolved":"E:\\pro\\web\\lb-toast\\src\\app.ts"},{"name":"./icon/index.svelte","loc":{"line":31,"column":17},"parent":"E:\\pro\\web\\lb-toast\\src\\app.svelte","resolved":"E:\\pro\\web\\lb-toast\\src\\icon\\index.svelte"},{"name":"./spinner/index.svelte","loc":{"line":32,"column":20},"parent":"E:\\pro\\web\\lb-toast\\src\\app.svelte","resolved":"E:\\pro\\web\\lb-toast\\src\\spinner\\index.svelte"},{"name":"_css_loader","parent":"E:\\pro\\web\\lb-toast\\src\\app.svelte","resolved":"E:\\pro\\web\\lb-toast\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _internal = require(\"svelte/internal\");\n\nvar _app = require(\"./app\");\n\nvar _index = _interopRequireDefault(require(\"./icon/index.svelte\"));\n\nvar _index2 = _interopRequireDefault(require(\"./spinner/index.svelte\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Object_1 = _internal.globals.Object;\nvar file = \"app.svelte\";\n\nfunction add_css() {\n  var style = (0, _internal.element)(\"style\");\n  style.id = \"svelte-1uxulok-style\";\n  style.textContent = \".toast-box.svelte-1uxulok.svelte-1uxulok{position:fixed;left:0;top:0;width:100vw;height:100vh;overflow:hidden;display:flex;justify-content:center;align-items:center;z-index:1000;transition:all 0.3s;opacity:0;visibility:hidden;pointer-events:none}.show.svelte-1uxulok.svelte-1uxulok{visibility:visible;opacity:1}.content-box.svelte-1uxulok.svelte-1uxulok{background:rgba(0, 0, 0, 0.5);border-radius:12px;z-index:1002}.icon-box.svelte-1uxulok.svelte-1uxulok,.loading-box.svelte-1uxulok.svelte-1uxulok{width:120px;min-height:120px;display:flex;flex-direction:column;justify-content:center;align-items:center}.icon-box.svelte-1uxulok>.text.svelte-1uxulok,.loading-box.svelte-1uxulok>.text.svelte-1uxulok{padding-top:16px;text-align:center;font-size:13px;color:#fff;line-height:1}.text-box.svelte-1uxulok.svelte-1uxulok{padding:8px 16px;max-width:70vw;text-align:center;color:#fff}\\n\";\n  (0, _internal.append_dev)(document.head, style);\n} // (146:4) {:else}\n\n\nfunction create_else_block(ctx) {\n  var div1;\n  var div0;\n  var spinner;\n  var t;\n  var current;\n  spinner = new _index2.default({\n    props: {\n      type:\n      /*state*/\n      ctx[0].loadingStyle\n    },\n    $$inline: true\n  });\n  var if_block =\n  /*state*/\n  ctx[0].text && create_if_block_3(ctx);\n  var block = {\n    c: function create() {\n      div1 = (0, _internal.element)(\"div\");\n      div0 = (0, _internal.element)(\"div\");\n      (0, _internal.create_component)(spinner.$$.fragment);\n      t = (0, _internal.space)();\n      if (if_block) if_block.c();\n      (0, _internal.attr_dev)(div0, \"class\", \"icon\");\n      (0, _internal.add_location)(div0, file, 147, 8, 3413);\n      (0, _internal.attr_dev)(div1, \"class\", \"loading-box svelte-1uxulok\");\n      (0, _internal.add_location)(div1, file, 146, 6, 3378);\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, div1, anchor);\n      (0, _internal.append_dev)(div1, div0);\n      (0, _internal.mount_component)(spinner, div0, null);\n      (0, _internal.append_dev)(div1, t);\n      if (if_block) if_block.m(div1, null);\n      current = true;\n    },\n    p: function update(ctx, dirty) {\n      var spinner_changes = {};\n      if (dirty &\n      /*state*/\n      1) spinner_changes.type =\n      /*state*/\n      ctx[0].loadingStyle;\n      spinner.$set(spinner_changes);\n\n      if (\n      /*state*/\n      ctx[0].text) {\n        if (if_block) {\n          if_block.p(ctx, dirty);\n        } else {\n          if_block = create_if_block_3(ctx);\n          if_block.c();\n          if_block.m(div1, null);\n        }\n      } else if (if_block) {\n        if_block.d(1);\n        if_block = null;\n      }\n    },\n    i: function intro(local) {\n      if (current) return;\n      (0, _internal.transition_in)(spinner.$$.fragment, local);\n      current = true;\n    },\n    o: function outro(local) {\n      (0, _internal.transition_out)(spinner.$$.fragment, local);\n      current = false;\n    },\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(div1);\n      (0, _internal.destroy_component)(spinner);\n      if (if_block) if_block.d();\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_else_block.name,\n    type: \"else\",\n    source: \"(146:4) {:else}\",\n    ctx: ctx\n  });\n  return block;\n} // (144:36) \n\n\nfunction create_if_block_2(ctx) {\n  var div;\n  var t_value =\n  /*state*/\n  ctx[0].text + \"\";\n  var t;\n  var block = {\n    c: function create() {\n      div = (0, _internal.element)(\"div\");\n      t = (0, _internal.text)(t_value);\n      (0, _internal.attr_dev)(div, \"class\", \"text-box svelte-1uxulok\");\n      (0, _internal.add_location)(div, file, 144, 6, 3317);\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, div, anchor);\n      (0, _internal.append_dev)(div, t);\n    },\n    p: function update(ctx, dirty) {\n      if (dirty &\n      /*state*/\n      1 && t_value !== (t_value =\n      /*state*/\n      ctx[0].text + \"\")) (0, _internal.set_data_dev)(t, t_value);\n    },\n    i: _internal.noop,\n    o: _internal.noop,\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(div);\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_if_block_2.name,\n    type: \"if\",\n    source: \"(144:36) \",\n    ctx: ctx\n  });\n  return block;\n} // (136:4) {#if state.type === 'icon'}\n\n\nfunction create_if_block(ctx) {\n  var div;\n  var icon;\n  var t;\n  var current;\n  icon = new _index.default({\n    props: {\n      type:\n      /*state*/\n      ctx[0].icon\n    },\n    $$inline: true\n  });\n  var if_block =\n  /*state*/\n  ctx[0].text && create_if_block_1(ctx);\n  var block = {\n    c: function create() {\n      div = (0, _internal.element)(\"div\");\n      (0, _internal.create_component)(icon.$$.fragment);\n      t = (0, _internal.space)();\n      if (if_block) if_block.c();\n      (0, _internal.attr_dev)(div, \"class\", \"icon-box svelte-1uxulok\");\n      (0, _internal.add_location)(div, file, 136, 6, 3108);\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, div, anchor);\n      (0, _internal.mount_component)(icon, div, null);\n      (0, _internal.append_dev)(div, t);\n      if (if_block) if_block.m(div, null);\n      current = true;\n    },\n    p: function update(ctx, dirty) {\n      var icon_changes = {};\n      if (dirty &\n      /*state*/\n      1) icon_changes.type =\n      /*state*/\n      ctx[0].icon;\n      icon.$set(icon_changes);\n\n      if (\n      /*state*/\n      ctx[0].text) {\n        if (if_block) {\n          if_block.p(ctx, dirty);\n        } else {\n          if_block = create_if_block_1(ctx);\n          if_block.c();\n          if_block.m(div, null);\n        }\n      } else if (if_block) {\n        if_block.d(1);\n        if_block = null;\n      }\n    },\n    i: function intro(local) {\n      if (current) return;\n      (0, _internal.transition_in)(icon.$$.fragment, local);\n      current = true;\n    },\n    o: function outro(local) {\n      (0, _internal.transition_out)(icon.$$.fragment, local);\n      current = false;\n    },\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(div);\n      (0, _internal.destroy_component)(icon);\n      if (if_block) if_block.d();\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_if_block.name,\n    type: \"if\",\n    source: \"(136:4) {#if state.type === 'icon'}\",\n    ctx: ctx\n  });\n  return block;\n} // (151:8) {#if state.text}\n\n\nfunction create_if_block_3(ctx) {\n  var div;\n  var t_value =\n  /*state*/\n  ctx[0].text + \"\";\n  var t;\n  var block = {\n    c: function create() {\n      div = (0, _internal.element)(\"div\");\n      t = (0, _internal.text)(t_value);\n      (0, _internal.attr_dev)(div, \"class\", \"text svelte-1uxulok\");\n      (0, _internal.add_location)(div, file, 151, 10, 3534);\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, div, anchor);\n      (0, _internal.append_dev)(div, t);\n    },\n    p: function update(ctx, dirty) {\n      if (dirty &\n      /*state*/\n      1 && t_value !== (t_value =\n      /*state*/\n      ctx[0].text + \"\")) (0, _internal.set_data_dev)(t, t_value);\n    },\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(div);\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_if_block_3.name,\n    type: \"if\",\n    source: \"(151:8) {#if state.text}\",\n    ctx: ctx\n  });\n  return block;\n} // (140:8) {#if state.text}\n\n\nfunction create_if_block_1(ctx) {\n  var div;\n  var t_value =\n  /*state*/\n  ctx[0].text + \"\";\n  var t;\n  var block = {\n    c: function create() {\n      div = (0, _internal.element)(\"div\");\n      t = (0, _internal.text)(t_value);\n      (0, _internal.attr_dev)(div, \"class\", \"text svelte-1uxulok\");\n      (0, _internal.add_location)(div, file, 140, 10, 3206);\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, div, anchor);\n      (0, _internal.append_dev)(div, t);\n    },\n    p: function update(ctx, dirty) {\n      if (dirty &\n      /*state*/\n      1 && t_value !== (t_value =\n      /*state*/\n      ctx[0].text + \"\")) (0, _internal.set_data_dev)(t, t_value);\n    },\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(div);\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_if_block_1.name,\n    type: \"if\",\n    source: \"(140:8) {#if state.text}\",\n    ctx: ctx\n  });\n  return block;\n}\n\nfunction create_fragment(ctx) {\n  var div1;\n  var div0;\n  var current_block_type_index;\n  var if_block;\n  var current;\n  var if_block_creators = [create_if_block, create_if_block_2, create_else_block];\n  var if_blocks = [];\n\n  function select_block_type(ctx, dirty) {\n    if (\n    /*state*/\n    ctx[0].type === \"icon\") return 0;\n    if (\n    /*state*/\n    ctx[0].type === \"text\") return 1;\n    return 2;\n  }\n\n  current_block_type_index = select_block_type(ctx, -1);\n  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);\n  var block = {\n    c: function create() {\n      div1 = (0, _internal.element)(\"div\");\n      div0 = (0, _internal.element)(\"div\");\n      if_block.c();\n      (0, _internal.attr_dev)(div0, \"class\", \"content-box svelte-1uxulok\");\n      (0, _internal.add_location)(div0, file, 134, 2, 3042);\n      (0, _internal.attr_dev)(div1, \"class\", \"toast-box svelte-1uxulok\");\n      (0, _internal.toggle_class)(div1, \"show\",\n      /*state*/\n      ctx[0].show);\n      (0, _internal.add_location)(div1, file, 133, 8, 2991);\n    },\n    l: function claim(nodes) {\n      throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, div1, anchor);\n      (0, _internal.append_dev)(div1, div0);\n      if_blocks[current_block_type_index].m(div0, null);\n      current = true;\n    },\n    p: function update(ctx, _ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          dirty = _ref2[0];\n\n      var previous_block_index = current_block_type_index;\n      current_block_type_index = select_block_type(ctx, dirty);\n\n      if (current_block_type_index === previous_block_index) {\n        if_blocks[current_block_type_index].p(ctx, dirty);\n      } else {\n        (0, _internal.group_outros)();\n        (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, function () {\n          if_blocks[previous_block_index] = null;\n        });\n        (0, _internal.check_outros)();\n        if_block = if_blocks[current_block_type_index];\n\n        if (!if_block) {\n          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);\n          if_block.c();\n        }\n\n        (0, _internal.transition_in)(if_block, 1);\n        if_block.m(div0, null);\n      }\n\n      if (dirty &\n      /*state*/\n      1) {\n        (0, _internal.toggle_class)(div1, \"show\",\n        /*state*/\n        ctx[0].show);\n      }\n    },\n    i: function intro(local) {\n      if (current) return;\n      (0, _internal.transition_in)(if_block);\n      current = true;\n    },\n    o: function outro(local) {\n      (0, _internal.transition_out)(if_block);\n      current = false;\n    },\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(div1);\n      if_blocks[current_block_type_index].d();\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_fragment.name,\n    type: \"component\",\n    source: \"\",\n    ctx: ctx\n  });\n  return block;\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n  var defaultState = {\n    show: false,\n    text: null,\n    icon: null\n  };\n  var state = Object.assign({}, defaultState);\n\n  function text(text) {\n    if (!text) return;\n    $$invalidate(0, state.type = \"text\", state);\n    $$invalidate(0, state.text = text, state);\n    return show();\n  }\n\n  function info(text, duration) {\n    return showIconToast(text, \"info\", duration);\n  }\n\n  function success(text, duration) {\n    return showIconToast(text, \"success\", duration);\n  }\n\n  function error(text, duration) {\n    return showIconToast(text, \"error\", duration);\n  }\n\n  function warning(text, duration) {\n    return showIconToast(text, \"warning\", duration);\n  }\n\n  function loading(options) {\n    $$invalidate(0, state.type = \"loading\", state);\n\n    if (!options) {\n      $$invalidate(0, state.show = true, state);\n      return clear;\n    } else if (typeof options === \"string\") {\n      $$invalidate(0, state.text = options, state);\n      $$invalidate(0, state.show = true, state);\n      return clear;\n    } else {\n      $$invalidate(0, state.text = options.text, state);\n      $$invalidate(0, state.show = true, state);\n      $$invalidate(0, state.loadingStyle = options.style || \"style0\", state);\n\n      if (options.duration) {\n        setTimeout(function () {\n          clear();\n        }, options.duration);\n      }\n\n      return {\n        setText: setText,\n        clear: clear\n      };\n    }\n  }\n\n  function clear() {\n    clearTimeout(timer);\n    $$invalidate(0, state = Object.assign({}, defaultState));\n  }\n\n  function setText(text) {\n    $$invalidate(0, state.text = text, state);\n  }\n\n  function showIconToast(text, icon, duration) {\n    $$invalidate(0, state.type = \"icon\", state);\n    $$invalidate(0, state.icon = icon, state);\n    $$invalidate(0, state.text = text, state);\n    return show(duration);\n  }\n  /** 定时器 */\n\n\n  var timer;\n\n  function show() {\n    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n    clearTimeout(timer);\n    $$invalidate(0, state.show = true, state);\n\n    if (duration !== -1) {\n      timer = setTimeout(function () {\n        $$invalidate(0, state.show = false, state);\n      }, duration);\n    }\n\n    return clear;\n  }\n\n  var writable_props = [];\n  Object_1.keys($$props).forEach(function (key) {\n    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== \"$$\") console.warn(\"<App> was created with unknown prop '\".concat(key, \"'\"));\n  });\n  var _$$props$$$slots = $$props.$$slots,\n      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,\n      $$scope = $$props.$$scope;\n  (0, _internal.validate_slots)(\"App\", $$slots, []);\n\n  $$self.$capture_state = function () {\n    return {\n      IconType: _app.IconType,\n      LoadingStyle: _app.LoadingStyle,\n      Icon: _index.default,\n      Spinner: _index2.default,\n      defaultState: defaultState,\n      state: state,\n      text: text,\n      info: info,\n      success: success,\n      error: error,\n      warning: warning,\n      loading: loading,\n      clear: clear,\n      setText: setText,\n      showIconToast: showIconToast,\n      timer: timer,\n      show: show\n    };\n  };\n\n  $$self.$inject_state = function ($$props) {\n    if (\"state\" in $$props) $$invalidate(0, state = $$props.state);\n    if (\"timer\" in $$props) timer = $$props.timer;\n  };\n\n  if ($$props && \"$$inject\" in $$props) {\n    $$self.$inject_state($$props.$$inject);\n  }\n\n  return [state, text, info, success, error, warning, loading, clear, setText];\n}\n\nvar App = /*#__PURE__*/function (_SvelteComponentDev) {\n  _inherits(App, _SvelteComponentDev);\n\n  var _super = _createSuper(App);\n\n  function App(options) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, options);\n    if (!document.getElementById(\"svelte-1uxulok-style\")) add_css();\n    (0, _internal.init)(_assertThisInitialized(_this), options, instance, create_fragment, _internal.safe_not_equal, {\n      text: 1,\n      info: 2,\n      success: 3,\n      error: 4,\n      warning: 5,\n      loading: 6,\n      clear: 7,\n      setText: 8\n    });\n    (0, _internal.dispatch_dev)(\"SvelteRegisterComponent\", {\n      component: _assertThisInitialized(_this),\n      tagName: \"App\",\n      options: options,\n      id: create_fragment.name\n    });\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"text\",\n    get: function get() {\n      return this.$$.ctx[1];\n    },\n    set: function set(value) {\n      throw new Error(\"<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n    }\n  }, {\n    key: \"info\",\n    get: function get() {\n      return this.$$.ctx[2];\n    },\n    set: function set(value) {\n      throw new Error(\"<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n    }\n  }, {\n    key: \"success\",\n    get: function get() {\n      return this.$$.ctx[3];\n    },\n    set: function set(value) {\n      throw new Error(\"<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n    }\n  }, {\n    key: \"error\",\n    get: function get() {\n      return this.$$.ctx[4];\n    },\n    set: function set(value) {\n      throw new Error(\"<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n    }\n  }, {\n    key: \"warning\",\n    get: function get() {\n      return this.$$.ctx[5];\n    },\n    set: function set(value) {\n      throw new Error(\"<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n    }\n  }, {\n    key: \"loading\",\n    get: function get() {\n      return this.$$.ctx[6];\n    },\n    set: function set(value) {\n      throw new Error(\"<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n    }\n  }, {\n    key: \"clear\",\n    get: function get() {\n      return this.$$.ctx[7];\n    },\n    set: function set(value) {\n      throw new Error(\"<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n    }\n  }, {\n    key: \"setText\",\n    get: function get() {\n      return this.$$.ctx[8];\n    },\n    set: function set(value) {\n      throw new Error(\"<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n    }\n  }]);\n\n  return App;\n}(_internal.SvelteComponentDev);\n\nvar _default = App;\nexports.default = _default;","css":".toast-box.svelte-1uxulok.svelte-1uxulok{position:fixed;left:0;top:0;width:100vw;height:100vh;overflow:hidden;display:flex;justify-content:center;align-items:center;z-index:1000;transition:all 0.3s;opacity:0;visibility:hidden;pointer-events:none}.show.svelte-1uxulok.svelte-1uxulok{visibility:visible;opacity:1}.content-box.svelte-1uxulok.svelte-1uxulok{background:rgba(0, 0, 0, 0.5);border-radius:12px;z-index:1002}.icon-box.svelte-1uxulok.svelte-1uxulok,.loading-box.svelte-1uxulok.svelte-1uxulok{width:120px;min-height:120px;display:flex;flex-direction:column;justify-content:center;align-items:center}.icon-box.svelte-1uxulok>.text.svelte-1uxulok,.loading-box.svelte-1uxulok>.text.svelte-1uxulok{padding-top:16px;text-align:center;font-size:13px;color:#fff;line-height:1}.text-box.svelte-1uxulok.svelte-1uxulok{padding:8px 16px;max-width:70vw;text-align:center;color:#fff}"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"c4d411f366d99131c907708da1380103","cacheData":{"env":{}}}